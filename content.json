{"meta":{"title":"VanillaYiYi","subtitle":"","description":"希望在这里分享我的经验与生活！","author":"VanillaYiYi","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2022-07-28T16:13:07.000Z","updated":"2022-08-01T15:33:39.669Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2022-07-28T16:12:57.000Z","updated":"2022-08-01T15:33:18.584Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2022-07-28T16:12:51.000Z","updated":"2022-07-28T17:39:29.571Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"留言板","date":"2022-07-28T16:13:33.000Z","updated":"2022-08-01T15:33:44.600Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/index.html","excerpt":"","text":"欢迎在下方留言！ 这里可以写下你的想法和建议，以待后续改进。"}],"posts":[{"title":"hexo之评论系统——twikoo","slug":"hexo/hexo之评论系统——twiko","date":"2022-08-02T05:07:14.000Z","updated":"2022-08-02T05:07:14.000Z","comments":true,"path":"2022/08/02/hexo/hexo之评论系统——twiko/","link":"","permalink":"http://example.com/2022/08/02/hexo/hexo%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94twiko/","excerpt":"","text":"写在前面Hexo博客里面支持的评论系统有：Disqus、Disqusjs、Livere、Gitalk、Valine、Waline、Utterances、Facebook Comments、Twikoo、Giscus，这里面有的评论有的是国外的服务器、有的有广告，本文要讲的Twikoo是在butterfly3.3之后支持的，它支持邮件提醒、微信提醒等功能，还是非常好用的。 注意：本文仅针对腾讯云的部署方式中的「手动部署」，其他详细部署方式请参考官方文档。 购买云开发套餐温馨提示：如果你已经拥有云开发环境，可以忽略这一步，直接到【登录授权】。1、进入云开发CloudBase，进行登录、实名认证操作，点击控制台： 2、点击云产品，选择云开发CloudBase： 3、点击新建，选择空模板，点击下一步： 4、选择合适的套餐进行购买： 温馨提示：地域选择【上海】计费方式选择【包年包月】环境名称自由填写套餐版本选择【特惠基础版1】,白嫖我选择免费版 5、按照上面的步骤操作之后，我们会拥有一个云开发环境： 注意：记录一下这个环境ID，我们后面会用。 登录授权环境 - 登录授权 - 开启【匿名登录】 安全配置环境 - 安全配置 - 添加域名：将自己的域名添加进去 温馨提示：如果更改了域名发现评论加载不出来的情况，请记得回来更改为最新域名，尤其是那些刚开始使用 github.io来作为自己博客域名的童鞋，哪天购买了自己的域名，记得换，记得换，记得换（重要的事情说三遍)。 云函数1、环境 - 云函数 - 新建云函数 温馨提示：函数名称填写：twikoo创建方式选择：空白函数运行环境选择：Nodejs10.15函数内存选择：128M必须按照上面的方式选择，不要瞎选瞎写好吧。 2、清空上图中「函数代码」框里的内容，复制exports.main = require(&#39;twikoo-func&#39;).main到里面，点击确定，如下：3、点击「twikoo」函数名进入云函数详情页 - 函数代码 - 文件 - 新建文件，输入package.json确定，将&#123; &quot;dependencies&quot;: &#123; &quot;twikoo-func&quot;: &quot;1.5.11&quot; &#125; &#125;内容复制到新建的文件package.json里面。 配置butterfly主题文件打开主题Volantis下的配置文件 123456789101112131415comments: title: &lt;i class=&#x27;fa-solid fa-comments&#x27;&gt;&lt;/i&gt; 评论 subtitle: service: twikoo #giscus # 可选评论系统 # twikoo giscus(实现了，只是嫌弃样式丑陋用了第一个) # Twikoo 有限使用这个，这个好看呀 # https://twikoo.js.org/ twikoo: js: https://unpkg.com/twikoo@latest # 建议锁定版本 path: window.location.pathname # 全局评论地址 # 其他配置项按照yml格式继续填写即可 除了 [el path] 选项 envId: vanilla-yiyi-6gxfhkqy46f064ce # 腾讯云环境id 这里我做了改写，这个是不真实的 placeholder: #全局评论占位，也可以在管理面板中的配置管理处设置（此处优先级更高） 显示效果如下： 最后关于Twikoo评论系统详细文档请参考：Twikoo官方文档（https://twikoo.js.org）文章来源于网络： 作者：重庆妹子在霾都链接：https://www.jianshu.com/p/c00b8e329f46来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","categories":[{"name":"Hexo系列","slug":"Hexo系列","permalink":"http://example.com/categories/Hexo%E7%B3%BB%E5%88%97/"}],"tags":[{"name":"评论系统","slug":"评论系统","permalink":"http://example.com/tags/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"},{"name":"twikoo","slug":"twikoo","permalink":"http://example.com/tags/twikoo/"}],"author":"作者"},{"title":"hexo之站点统计——busuanzi","slug":"hexo/hexo之站点统计——busuanzi","date":"2022-08-01T14:32:56.000Z","updated":"2022-08-01T14:32:56.000Z","comments":true,"path":"2022/08/01/hexo/hexo之站点统计——busuanzi/","link":"","permalink":"http://example.com/2022/08/01/hexo/hexo%E4%B9%8B%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1%E2%80%94%E2%80%94busuanzi/","excerpt":"","text":"本片介绍的是站点信息统计之busuanzi 一、站点信息1.1 在_config.volantis.yml搜索统计,显示有站点统计信息123456789visitcounter: # 站点统计访客开启入口在下面⬇ siteuv: enable: true text: &#x27;本站访客数：&#x27; unit: &#x27;人&#x27; sitepv: enable: true text: &#x27;本站总访问量：&#x27; unit: &#x27;次&#x27; 1.2 接下来就是analytics引入busuanzi,这里就需要配置个人的app_id和app_key1234567# 站点统计访客开启入口，引入busuanzi，并配置属于自己的app_id和app_keyanalytics: busuanzi: volantis-static/libs/busuanzi/js/busuanzi.pure.mini.js leancloud: # 请使用自己的 id &amp; key 以防止数据丢失 app_id: u9j57bwJod4EDmXWdxrwuqQT-MdYXbMMI app_key: jfHtEKVE24j0IVCGHbvuFClp custom_api_server: # 国际版一般不需要写，除非自定义了 API Server 二、获取busuanzi的配置信息2.1 打开leancloud官网，注册账号，该认证认证 leancloud官网:https://www.leancloud.cn/ ,点击免费使用，注册账号 2.2 登录账号注册应用 2.3 点击应用，选择应用 2.4 点击设置，应用凭证，右侧就是我们想要的配置信息了 复制保存我们的配置信息，填入指定位置，页面就是有相关信息展示了 效果展示 tip: 本地运行显示数据有点夸张了，还有点延迟，但是部署之后会显示正常数据","categories":[{"name":"Hexo系列","slug":"Hexo系列","permalink":"http://example.com/categories/Hexo%E7%B3%BB%E5%88%97/"}],"tags":[{"name":"busuanzi","slug":"busuanzi","permalink":"http://example.com/tags/busuanzi/"},{"name":"站点统计","slug":"站点统计","permalink":"http://example.com/tags/%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1/"}],"author":"作者"},{"title":"hexo之评论系统——giscus","slug":"hexo/hexo之评论系统——giscus","date":"2022-07-30T17:08:28.000Z","updated":"2022-08-02T07:15:09.027Z","comments":true,"path":"2022/07/31/hexo/hexo之评论系统——giscus/","link":"","permalink":"http://example.com/2022/07/31/hexo/hexo%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94giscus/","excerpt":"","text":"本篇主要讲的是hexo主题volantis的评论系统相关的giscus 一、评论系统的选择giscus1.1 打开文件_config.volantis.yml，搜索comments评论部分，可以看到这里选择的是giscus12345comments: title: &lt;i class=&#x27;fa-solid fa-comments&#x27;&gt;&lt;/i&gt; 评论 subtitle: service: giscus # 可选评论系统 # 1.2 继续搜索giscus，显示需要配置一些repo&#x2F;repo-id等参数1234567891011121314151617# giscus# https://giscus.app# https://github.com/laymonage/giscusgiscus: # 以下配置按照 yml 格式增删填写即可 repo: txw1314/comment-giscus repo-id: R_kgDOHvE8vw category: Comments category-id: DIC_kwDOHvE8v84CQgFl mapping: &quot;title&quot; reactions-enabled: &quot;1&quot; emit-metadata: &quot;0&quot; position: &quot;top&quot; loading: &quot;lazy&quot; crossorigin: &quot;anonymous&quot; lang: &quot;zh-CN&quot; # 以上配置按照 yml 格式增删填写即可 二、如何获取giscus的相关配置2.1 在github的操作2.1.1 新建一个关于评论的仓库我这里命名的是comment-giscus,点击Setting 2.1.2 继续往下滚动到Features，勾选Wikis 2.1.3 继续滚动，勾选Discussions。 2.2 在GitHub代码库上的讨论页面创建一个类别 比如 “Comments（评论）”——或者选择现有的类别。 2.2.1 如果没有，那就新建类别 2.2.2 填写title和详情，点击create创建完成 2.2.3 创建完成，分类里面有了我们新增的分类 2.3 转到 https://github.com/apps/giscus，按照提示操作，并仅授予对选定代码库的访问权限。2.3.1 安装giscus 在根目录安装giscus : npm install giscus 2.3.2 选择建立的评论仓库 2.3.3 确认账号密码 2.3.4 选择完成 2.4 在giscus的操作，我们需要配置giscus的小部件。 打开网页：giscus 2.4.1 选择语言和仓库，输入之前github创建仓库名称，如用username/reponame，这里包括用户名和仓库名称， 注意&#x2F;前后不能有空格，不能输错，否则下面会提示报错 2.4.2 页面映射关系，这里我选择的是第三个 2.4.3 然后选择Discussion分类和特性分类选择我们上面新建的分类，特性我选择了箭头不两个，也可不选，主题随便选一个就行，不选也没关系这个不影响 2.4.4 启用giscus一切就绪之后，Giscus将根据你的设置生成一个脚本标签，这就是我们想要的giscus的配置信息了。你可以将其粘贴到你的代码中，记得把这个保存下来，不然还要在操作一下这步骤重新生成了 这是最终结果","categories":[{"name":"Hexo系列","slug":"Hexo系列","permalink":"http://example.com/categories/Hexo%E7%B3%BB%E5%88%97/"}],"tags":[{"name":"评论系统","slug":"评论系统","permalink":"http://example.com/tags/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"},{"name":"giscus","slug":"giscus","permalink":"http://example.com/tags/giscus/"}]},{"title":"typora破解版安装","slug":"typora/typora破解版安装","date":"2022-07-30T15:56:45.000Z","updated":"2022-08-02T07:14:58.627Z","comments":true,"path":"2022/07/30/typora/typora破解版安装/","link":"","permalink":"http://example.com/2022/07/30/typora/typora%E7%A0%B4%E8%A7%A3%E7%89%88%E5%AE%89%E8%A3%85/","excerpt":"","text":"typora收费，对程序猿来说是不可能的，我只会白嫖，今天在小破站看到一个破解版的typora的安装，分享给大家。 我把软件和破解文件放到了自己的阿里云盘分享给大家，附上链接：「typora1.3.8」等文件 https://www.aliyundrive.com/s/WLHNPidNYrL 1.1 下载完之后，选择安装包正常安装即可 1.2 打开破解插件，复制文件。桌面typora图标右键打开文件所在位置，粘贴复制的破解文件，替换即可，此时已经破解完成了打开typora，点击帮助—我的许可证，将看到破解好的typora，是不是特别简单，我也是惊艳到了。","categories":[{"name":"typora","slug":"typora","permalink":"http://example.com/categories/typora/"}],"tags":[{"name":"typora","slug":"typora","permalink":"http://example.com/tags/typora/"},{"name":"破解版","slug":"破解版","permalink":"http://example.com/tags/%E7%A0%B4%E8%A7%A3%E7%89%88/"}]},{"title":"PicGo相册不能显示问题及解决办法","slug":"picgo/PicGo相册不能显示问题及解决办法","date":"2022-07-30T14:30:02.000Z","updated":"2022-08-02T07:15:02.015Z","comments":true,"path":"2022/07/30/picgo/PicGo相册不能显示问题及解决办法/","link":"","permalink":"http://example.com/2022/07/30/picgo/PicGo%E7%9B%B8%E5%86%8C%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","excerpt":"","text":"我的PicGo图片上传成功了，但是相册区域图片不能正常显示，如下图所示 解决办法1.0 重启应用退出应用，重新启动，上传的图片能正常显示 2.0 卸载应用，重新安装卸载重装 PicGo，不需要重新配置，之后上传的图片都能正常显示 3.0 打开picgo设置，找到设置Server，把端口号修改成36677 4.0 修改host文件 原因是github屏蔽掉了图片，结局办法就是修改host，我就是用的这个方法解决的 host路径： 1C:\\Windows\\System32\\drivers\\etc\\hosts 找到host文件，用记事本格式打开，添加代码 GitHub Start1234567891011121314151617181920212223242526140.82.113.3 github.com140.82.114.20 gist.github.com151.101.184.133 assets-cdn.github.com151.101.184.133 raw.githubusercontent.com151.101.184.133 gist.githubusercontent.com151.101.184.133 cloud.githubusercontent.com151.101.184.133 camo.githubusercontent.com151.101.184.133 avatars0.githubusercontent.com199.232.68.133 avatars0.githubusercontent.com199.232.28.133 avatars1.githubusercontent.com151.101.184.133 avatars1.githubusercontent.com151.101.184.133 avatars2.githubusercontent.com199.232.28.133 avatars2.githubusercontent.com151.101.184.133 avatars3.githubusercontent.com199.232.68.133 avatars3.githubusercontent.com151.101.184.133 avatars4.githubusercontent.com199.232.68.133 avatars4.githubusercontent.com151.101.184.133 avatars5.githubusercontent.com199.232.68.133 avatars5.githubusercontent.com151.101.184.133 avatars6.githubusercontent.com199.232.68.133 avatars6.githubusercontent.com151.101.184.133 avatars7.githubusercontent.com199.232.68.133 avatars7.githubusercontent.com151.101.184.133 avatars8.githubusercontent.com199.232.68.133 avatars8.githubusercontent.com# GitHub End tip: host文件修改需要管理员权限，可在桌面复制一份，用修改完的文件替换掉原来的文件即可，权限可以自己更改，搞完再改回去","categories":[{"name":"PicGo","slug":"PicGo","permalink":"http://example.com/categories/PicGo/"}],"tags":[{"name":"PicGo","slug":"PicGo","permalink":"http://example.com/tags/PicGo/"}]},{"title":"github克隆项目失败","slug":"github/github克隆项目失败","date":"2022-07-29T11:00:25.000Z","updated":"2022-08-02T07:15:12.022Z","comments":true,"path":"2022/07/29/github/github克隆项目失败/","link":"","permalink":"http://example.com/2022/07/29/github/github%E5%85%8B%E9%9A%86%E9%A1%B9%E7%9B%AE%E5%A4%B1%E8%B4%A5/","excerpt":"","text":"unable to access ‘https://github.com/用户名/仓库名.git/&#39;: SSL certificate problem: self问题解决前言 今天想在github上找个项目玩玩，但是发现clone不下来，百度没有找到解决方案，于是又把git重装了一遍，发现还是不能clone,而且不能push，而且是同样的错误。于是Google了一下找到解决方案 原因Git client in Fisheye&#x2F;Crucible server perform verification on the SSL certificate and stop the process if it is unknown. 大概意思是：Fisheye&#x2F;Crucible服务器不能识别git的SSL证书，所以操作停止执行。 解决 在git命令行输入以下命令即可 1git config --global http.sslVerify false","categories":[{"name":"github","slug":"github","permalink":"http://example.com/categories/github/"}],"tags":[{"name":"github","slug":"github","permalink":"http://example.com/tags/github/"}]},{"title":"使用github建立图床,picgo和typora上传图片","slug":"github/github-img","date":"2022-07-29T09:26:52.000Z","updated":"2022-08-02T08:55:19.045Z","comments":true,"path":"2022/07/29/github/github-img/","link":"","permalink":"http://example.com/2022/07/29/github/github-img/","excerpt":"","text":"建立图床必须具备什么条件 首先你需要一个github账号，如果没有的话，请先注册。github官网地址 github.comPicGo下载地址 PicGo 一个github账号 一个公开的仓库 PicGo 上传图片 Typora 上传图片 一、新建仓库1.1 创建一个新仓库，用于存放图片。填写仓库名称和描述，且仓库必须是public的，否则存储的图片不能正常访问。 1.2 生成一个token，用于picGo访问github选择左侧菜单的Developer settings 之后选择左侧Personal access tokens，再点击Generate new token 填写Note，勾选repo.注意，生成的token只会在这里显示一次，所以记得单独保存下来哦。至此，Github的配置完成。 二、下载picGo，并进行配置2.1 下载访问picGo下载地址，选择 picGo-Setup-XXX.exe下载软件安装包即可。 如果安装成功，picGo不能正常使用，则可以用兼容模式启动,或者重启电脑。【此问题因电脑而异,重启电脑能解决百分之九十九的问题。】 2.2 配置仓库名：[github用户名]&#x2F;[第一步新建的仓库名称] 分支：默认master，从2020.10.01开始，github的默认分支名变更为main 设定token：第一步创建的token 指定存储路径：可填可不填，如果填写了，图片就会存储在img文件夹下 设定自定义域名： https://cdn.jsdelivr.net/gh/[github用户名]/[仓库名]@main,注意，此处的分支一定要填写@main，否则默认使用master分支。而现在github创建的默认分支名为main，如果不指定，则会出现图片不能上传的情况。我的是: https://cdn.jsdelivr.net/gh/txw1314/blog-img@main 2.3 插件安装点击插件设置右边的图标，进入插件网页，选择表格中的插件名称复制到input输入框,选择插件安装，可显示更多内容 至此，github+picGo的配置完成，可以在上传区进行图片上传了。 补充几点 原本github的自定义域名应该是： https://raw.githubusercontent.com/[username]/[仓库名]但是使用这种方式访问图片巨慢，所以建议使用jsdelivr作为cdn加速。改变域名即可，不需要任何其他配置。https://cdn.jsdelivr.net/gh/txw1314/blog-img@main 配置完成，可能出现不能上传的情况，请大家耐心检查，也许某一步的配置出现了问题，实在不行就重启电脑，毕竟重启电脑能解决99%的问题。 不止可以用github作为图床，还可以使用国内的码云(gitee)。当然也有收费的七牛、阿里云等等。在安装插件之后会有诸多选项。 三、上传图片上面配置完成，下面我们就可以上传图片了。 3.1 上传图片 3.2 上传图片完成 picGo监听端口设置 选择“PicGo设置”–&gt;“设置server” 如果监听端口不是36677，则需要修改为36677。否则会出现picGo能正常上传 图片，而typora上传图片失败的情况。如果picGO不能正常上传图片，建议重启电脑，我就是重启了之后就能正常上传图片了，只是图片不会显示缩略图 四 、使用Typora上传图片4.1 点击Typora文件—偏好设置如下图所示，选择图像，勾选右侧选项，上传服务，选择picgo路径，即可配置完成 4.2 我们也可以点击验证图片上传选项试一下 4.3 验证成功 4.4 我的验证失败了，虽然失败了，但是不影响我上传图片，嗯，问题不大，哈哈哈 然后就是在Typora复制文件图片，右键上传图片，稍等一下就会自动完成 tip: 在Typora粘贴图片的时候，个人建议使用Snipaste这个软件，非常方便！","categories":[{"name":"github","slug":"github","permalink":"http://example.com/categories/github/"}],"tags":[{"name":"github","slug":"github","permalink":"http://example.com/tags/github/"},{"name":"picgo","slug":"picgo","permalink":"http://example.com/tags/picgo/"},{"name":"typora","slug":"typora","permalink":"http://example.com/tags/typora/"}]},{"title":"fariy-001","slug":"fariy/fariy-001","date":"2022-07-28T12:18:46.000Z","updated":"2022-08-02T07:11:12.451Z","comments":true,"path":"2022/07/28/fariy/fariy-001/","link":"","permalink":"http://example.com/2022/07/28/fariy/fariy-001/","excerpt":"","text":"精美壁纸","categories":[{"name":"壁纸","slug":"壁纸","permalink":"http://example.com/categories/%E5%A3%81%E7%BA%B8/"}],"tags":[{"name":"fariy","slug":"fariy","permalink":"http://example.com/tags/fariy/"}]},{"title":"Hexo之博客的安装与部署-01","slug":"hexo/Hexo之博客的安装与部署-01","date":"2022-07-28T11:14:42.000Z","updated":"2022-08-02T07:12:29.960Z","comments":true,"path":"2022/07/28/hexo/Hexo之博客的安装与部署-01/","link":"","permalink":"http://example.com/2022/07/28/hexo/Hexo%E4%B9%8B%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2-01/","excerpt":"","text":"一. 软件环境Git Node.js Clash for Windows(任意加速器，保证能连接到Github) 1.1 Git官网我们会将搭建好的Hexo上传到Github，所以需要Git命令行支持。 Git官网页面根据系统选择64/32位 1.2 Node.js选择下载LTS版本 如果你的网络无法进行下载，请访问以下链接进行下载： Git-密码0625-来自上杉九月的网盘分享https://cloud.sakurasep.club/s/YdiE Node.js-密码0625-来自上杉九月的网盘分享https://cloud.sakurasep.club/s/jdHB 1.3 检查安装是否成功打开cmd命令行，输入node -v后显示下图所示，即为安装成功 显示版本号 在电脑的任意目录点击右键，能够显示Git Bash Here使用这个功能可以更方便的在当前目录启动命令行，当然你也可以使用cmd的cd命令到当前目录 右键菜单出现选项 二. 博客本地化部署2.1 更改npm为cnpm源国内某些网络环境访问npm会出现问题，建议使用taobao镜像源，能有效减少故障的发生 切换npm源 1npm install -g cnpm --registry=https://registry.npm.taobao.org cnpm切换过程 使用cnpm -v后正常输出版本号，即为安装成功 显示版本号 2.2 安装hexo命令行-g是对全局安装hexo命令行 安装Hexo命令行 1cnpm install hexo-cli -g hexo-cli安装过程 2.3 Hexo博客初始化选取一个想要安装Hexo的目录，路径中最好不要含有中文，后续会更好处理 Hexo初始化命令 1hexo init 初始化过程 此时文件夹内应有初始化文件，不过只要接下来能够成功运行，上述过程没有报错，就没问题。 hexo文件夹结构 如果初始化出现问题，即在运行hexo init的时候报错(通常是由于网络而出现问题) 如果出现网络问题导致无法下载，请访问以下链接获取基础包： Hexo_基础包文件-密码0625-来自上杉九月的网盘分享https://cloud.sakurasep.club/s/Nouy 2.4 运行博客在博客根目录右键打开Git Bash Here 输入以下指令 Hexo初始化命令 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo s hexo clean 清除已经部署的网页静态文件 hexo g 编译当前博客 hexo s 启动本地服务器 本地部署过程 出现Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.，并且没有后续的警告语句，说明部署成功，在浏览器中输入localhost:4000查看部署效果。 运行成功 如果你的端口4000被占用，可以使用hexo s -p 端口号。然后访问http://localhost:端口号 以上，博客的最基本的本地化部署已经完成，接下来的内容是将博客部署到网络进行在线访问。 三. 博客部署到网络基本介绍一下目前不同部署方式的差别。 Github：微软旗下的开源代码托管平台，国内某些运营商可能无法访问，一般来说还是推荐部署在Github Pages，这也是我本人目前主要用的服务。 Gitee：虽然是国内的代码托管平台，访问速度可以保证，但是它的Pages页面需要手动更新，并且不能够绑定自定义的域名(如果你想和别的博主交换友链，最好还是要有一个域名。因为一般有域名的博客更有动力维护下去)。 Coding：部署方式很复杂，新版的Coding Pages貌似是和腾讯云挂钩，按量付费，感觉没必要了。 Vercel：是一个静态网页部署平台，好像访问速度要比Github稍微快一些，并且提供修改自定义域名。 云服务器：访问速度很大程度上取决于你的服务器的带宽，而且现在服务器的价格也不便宜，以后部署其他需要服务器的项目时再使用比较好。 3.1 部署到Github(推荐)全球最大同性社交平台 3.1.1 创建Github仓库注册完成Github账号，新建仓库用于保存上传博客代码。 Github账号注册时尽量不要使用国内邮箱，尤其是QQ邮箱 新建仓库 这里我已经存在该仓库，所以会爆红 Tips:试试新建一个仓库名为你Github用户名的仓库 按照图示修改好仓库名后，确保仓库为公开(Public)，其他设置按需更改，创建仓库。 3.1.2 获取与Github的连接在任意位置打开Git Bash Here，输入以下指令 建立与Github的连接 123git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub注册邮箱&quot;ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot; 生成密钥 输入第三个命令后只需要连续按下三次回车，就会在C:\\Users\\用户名\\.ssh中生成密钥文件 打开id_rsa.pub，复制文件内容，添加到 添加SSH公钥添加SSH公钥 然后在Git Bash中输入以下命令测试是否连通Github 测试与Github的连接 1ssh -T git@github.com 成功连通 3.1.3 上传博客到Github首先在Git Bash中输入以下命令安装部署插件 安装hexo-deployer-git 1cnpm install hexo-deployer-git --save 安装成功 打开根目录下的_config.yml文件 deploy配置 config文件配置 123456# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repo: 填入仓库连接 branch: master repo 可以复制此处的链接 复制仓库链接 填好后在Git Bash中输入下列命令部署到Github仓库 部署到Github 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d Github同理(此为部署到Gitee) 此时访问https://Github用户名.github.io即可访问 Github显示效果相同 3.1.4 绑定自定义域名你可以自行选择域名提供商，购买完域名后，在域名解析里设置以下解析记录 标准解析设置 解析记录简介主机记录：设置为@为泛解析，即访问域名为https://域名。如果想要设置为二级域名，请将主机记录设置为想要设置的名称，比如主机记录设置为hexo，即访问域名为https://hexo.域名记录类型：设置为CNAME，将域名解析到网址。因为Github建议将自定义域名以CNAME解析到Github用户名.github.io 然后在_config.yml中设置url为你解析的域名 url设置 最后再博客根目录/source下新建CNAME文件 注意，没有拓展名! 文件内容为自定义的域名 用于Github识别项目的自定义地址 3.2 部署到Gitee(备用方法)Gitee官网 3.2.1 创建Gitee仓库部署到Gitee与部署到Github的流程相差很小，看一个就行。 新建Gitee仓库 3.2.2 获取与Gitee的连接在任意位置打开Git Bash Here，输入以下指令 连接到Gitee 123git config --global user.name &quot;你的Gitee用户名&quot;git config --global user.email &quot;你的Gitee注册邮箱&quot;ssh-keygen -t rsa -C &quot;你的Gitee注册邮箱&quot; 获取SSH公钥 输入第三个命令后只需要连续按下三次回车，就会在C:\\Users\\用户名\\.ssh中生成密钥文件 打开id_rsa.pub，复制文件内容，添加到 添加SSH公钥 然后在Git Bash中输入以下命令测试是否连通Gitee 测试连接 1ssh -T git@gitee.com 连接成功 3.2.3 上传博客到Gitee首先在Git Bash中输入以下命令安装部署插件 安装hexo-deployer-git 1cnpm install hexo-deployer-git --save 安装过程 打开根目录下的_config.yml文件 Gitee配置 config文件配置 123456# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repo: 填入仓库连接 branch: master repo 可以复制此处的链接 复制仓库链接 填好后在Git Bash中输入下列命令部署到Gitee仓库 部署到Gitee 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 上传成功 在仓库的服务-Gitee Pages进行手动部署 Github Pages会自动使用你仓库的代码进行部署，而Gitee需要你手动更新。 手动更新Pages 打开强制使用Https，更新部署 更新 等待部署结束后，访问Https://Gitee用户名.gitee.io查看部署结果 部署完成 3.3 部署到Vercel请在看过3.1部署到Github后再观看本部分教程。 官网 3.3.1 连接Github仓库连接仓库 项目名只能使用小写英文，无法使用大写英文，会报错 基本设置 稍等一段时间后，Vercel便部署完成了你的博客 部署完成 Vercel默认提供了域名，你也可以更改。到Settings-Domains中进行更改 更改域名 写在最后本篇文章基本讲述了Hexo博客的基本部署，包括了本地化部署测试和上传到Github，Gitee或是Vercel等平台，使用托管平台提供的Page服务进行远程访问。 本篇教程属于面向与小白的零基础教程系列，如果在安装过程中出现任何问题，你可以在评论区提问，你的提问也是我充实文章的助力！ 文章来源于上杉九月的博客(Hexo_01-博客的安装与部署 - 九月的生活 (sakurasep.site))","categories":[{"name":"Hexo系列","slug":"Hexo系列","permalink":"http://example.com/categories/Hexo%E7%B3%BB%E5%88%97/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]},{"title":"Hello World","slug":"study/hello-world","date":"2022-07-28T07:30:26.000Z","updated":"2022-08-02T06:31:14.160Z","comments":true,"path":"2022/07/28/study/hello-world/","link":"","permalink":"http://example.com/2022/07/28/study/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"个人学习","slug":"个人学习","permalink":"http://example.com/categories/%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"个人","slug":"个人","permalink":"http://example.com/tags/%E4%B8%AA%E4%BA%BA/"}]}],"categories":[{"name":"Hexo系列","slug":"Hexo系列","permalink":"http://example.com/categories/Hexo%E7%B3%BB%E5%88%97/"},{"name":"typora","slug":"typora","permalink":"http://example.com/categories/typora/"},{"name":"PicGo","slug":"PicGo","permalink":"http://example.com/categories/PicGo/"},{"name":"github","slug":"github","permalink":"http://example.com/categories/github/"},{"name":"壁纸","slug":"壁纸","permalink":"http://example.com/categories/%E5%A3%81%E7%BA%B8/"},{"name":"个人学习","slug":"个人学习","permalink":"http://example.com/categories/%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"评论系统","slug":"评论系统","permalink":"http://example.com/tags/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"},{"name":"twikoo","slug":"twikoo","permalink":"http://example.com/tags/twikoo/"},{"name":"busuanzi","slug":"busuanzi","permalink":"http://example.com/tags/busuanzi/"},{"name":"站点统计","slug":"站点统计","permalink":"http://example.com/tags/%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1/"},{"name":"giscus","slug":"giscus","permalink":"http://example.com/tags/giscus/"},{"name":"typora","slug":"typora","permalink":"http://example.com/tags/typora/"},{"name":"破解版","slug":"破解版","permalink":"http://example.com/tags/%E7%A0%B4%E8%A7%A3%E7%89%88/"},{"name":"PicGo","slug":"PicGo","permalink":"http://example.com/tags/PicGo/"},{"name":"github","slug":"github","permalink":"http://example.com/tags/github/"},{"name":"picgo","slug":"picgo","permalink":"http://example.com/tags/picgo/"},{"name":"fariy","slug":"fariy","permalink":"http://example.com/tags/fariy/"},{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"个人","slug":"个人","permalink":"http://example.com/tags/%E4%B8%AA%E4%BA%BA/"}]}